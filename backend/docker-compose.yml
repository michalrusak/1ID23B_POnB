version: "3.8"

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - blockchain_network
    restart: unless-stopped

  node1:
    build: .
    environment:
      - NODE_ID=node1
      - PORT=5001
      - POSTGRES_HOST=postgres
      - SECRET_KEY=${SECRET_KEY}
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - blockchain_network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/blockchain/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  node2:
    build: .
    environment:
      - NODE_ID=node2
      - PORT=5002
      - POSTGRES_HOST=postgres
      - SECRET_KEY=${SECRET_KEY}
    ports:
      - "5002:5002"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - blockchain_network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/blockchain/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  node3:
    build: .
    environment:
      - NODE_ID=node3
      - PORT=5003
      - POSTGRES_HOST=postgres
      - SECRET_KEY=${SECRET_KEY}
    ports:
      - "5003:5003"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - blockchain_network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/blockchain/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  node4:
    build: .
    environment:
      - NODE_ID=node4
      - PORT=5004
      - POSTGRES_HOST=postgres
      - SECRET_KEY=${SECRET_KEY}
    ports:
      - "5004:5004"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - blockchain_network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/blockchain/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  node5:
    build: .
    environment:
      - NODE_ID=node5
      - PORT=5005
      - POSTGRES_HOST=postgres
      - SECRET_KEY=${SECRET_KEY}
    ports:
      - "5005:5005"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - blockchain_network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/blockchain/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  node6:
    build: .
    environment:
      - NODE_ID=node6
      - PORT=5006
      - POSTGRES_HOST=postgres
      - SECRET_KEY=${SECRET_KEY}
    ports:
      - "5006:5006"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - blockchain_network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5006/blockchain/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

networks:
  blockchain_network:
    driver: bridge

volumes:
  postgres_data:
